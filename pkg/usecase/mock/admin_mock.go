// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/admin.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "eatry/pkg/domain"
	models "eatry/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminUseCase is a mock of AdminUseCase interface.
type MockAdminUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUseCaseMockRecorder
}

// MockAdminUseCaseMockRecorder is the mock recorder for MockAdminUseCase.
type MockAdminUseCaseMockRecorder struct {
	mock *MockAdminUseCase
}

// NewMockAdminUseCase creates a new mock instance.
func NewMockAdminUseCase(ctrl *gomock.Controller) *MockAdminUseCase {
	mock := &MockAdminUseCase{ctrl: ctrl}
	mock.recorder = &MockAdminUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUseCase) EXPECT() *MockAdminUseCaseMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockAdminUseCase) BlockUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAdminUseCaseMockRecorder) BlockUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAdminUseCase)(nil).BlockUser), userID)
}

// CreateAdmin mocks base method.
func (m *MockAdminUseCase) CreateAdmin(admin models.AdminSignUp) (domain.TokenAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", admin)
	ret0, _ := ret[0].(domain.TokenAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminUseCaseMockRecorder) CreateAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminUseCase)(nil).CreateAdmin), admin)
}

// Dashboard mocks base method.
func (m *MockAdminUseCase) Dashboard() (models.DashBoardTotal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dashboard")
	ret0, _ := ret[0].(models.DashBoardTotal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dashboard indicates an expected call of Dashboard.
func (mr *MockAdminUseCaseMockRecorder) Dashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dashboard", reflect.TypeOf((*MockAdminUseCase)(nil).Dashboard))
}

// ExecuteSalesReportByDate mocks base method.
func (m *MockAdminUseCase) ExecuteSalesReportByDate(startDate, endDate string) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteSalesReportByDate", startDate, endDate)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSalesReportByDate indicates an expected call of ExecuteSalesReportByDate.
func (mr *MockAdminUseCaseMockRecorder) ExecuteSalesReportByDate(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSalesReportByDate", reflect.TypeOf((*MockAdminUseCase)(nil).ExecuteSalesReportByDate), startDate, endDate)
}

// FilterSalesReport mocks base method.
func (m *MockAdminUseCase) FilterSalesReport(timePeriod string) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterSalesReport", timePeriod)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSalesReport indicates an expected call of FilterSalesReport.
func (mr *MockAdminUseCaseMockRecorder) FilterSalesReport(timePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSalesReport", reflect.TypeOf((*MockAdminUseCase)(nil).FilterSalesReport), timePeriod)
}

// GetUsers mocks base method.
func (m *MockAdminUseCase) GetUsers(page, count int) ([]models.UserDetailsAtAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page, count)
	ret0, _ := ret[0].([]models.UserDetailsAtAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminUseCaseMockRecorder) GetUsers(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminUseCase)(nil).GetUsers), page, count)
}

// LoginHandler mocks base method.
func (m *MockAdminUseCase) LoginHandler(adminDetails models.AdminLogin) (domain.TokenAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", adminDetails)
	ret0, _ := ret[0].(domain.TokenAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockAdminUseCaseMockRecorder) LoginHandler(adminDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockAdminUseCase)(nil).LoginHandler), adminDetails)
}

// UnBlockUser mocks base method.
func (m *MockAdminUseCase) UnBlockUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBlockUser indicates an expected call of UnBlockUser.
func (mr *MockAdminUseCaseMockRecorder) UnBlockUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUser", reflect.TypeOf((*MockAdminUseCase)(nil).UnBlockUser), userID)
}
