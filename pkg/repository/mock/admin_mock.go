// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/admin.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "eatry/pkg/domain"
	models "eatry/pkg/utils/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// AmountDetails mocks base method.
func (m *MockAdminRepository) AmountDetails() (models.DashboardAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmountDetails")
	ret0, _ := ret[0].(models.DashboardAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmountDetails indicates an expected call of AmountDetails.
func (mr *MockAdminRepositoryMockRecorder) AmountDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmountDetails", reflect.TypeOf((*MockAdminRepository)(nil).AmountDetails))
}

// CheckAdminAvailability mocks base method.
func (m *MockAdminRepository) CheckAdminAvailability(admin models.AdminSignUp) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdminAvailability", admin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAdminAvailability indicates an expected call of CheckAdminAvailability.
func (mr *MockAdminRepositoryMockRecorder) CheckAdminAvailability(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminAvailability", reflect.TypeOf((*MockAdminRepository)(nil).CheckAdminAvailability), admin)
}

// CreateAdmin mocks base method.
func (m *MockAdminRepository) CreateAdmin(admin models.AdminSignUp) (models.AdminDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", admin)
	ret0, _ := ret[0].(models.AdminDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminRepositoryMockRecorder) CreateAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminRepository)(nil).CreateAdmin), admin)
}

// FilterSalesReport mocks base method.
func (m *MockAdminRepository) FilterSalesReport(startTime, endTime time.Time) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterSalesReport", startTime, endTime)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSalesReport indicates an expected call of FilterSalesReport.
func (mr *MockAdminRepositoryMockRecorder) FilterSalesReport(startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSalesReport", reflect.TypeOf((*MockAdminRepository)(nil).FilterSalesReport), startTime, endTime)
}

// GetUserById mocks base method.
func (m *MockAdminRepository) GetUserById(userID int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userID)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAdminRepositoryMockRecorder) GetUserById(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAdminRepository)(nil).GetUserById), userID)
}

// GetUsers mocks base method.
func (m *MockAdminRepository) GetUsers(page, count int) ([]models.UserDetailsAtAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", page, count)
	ret0, _ := ret[0].([]models.UserDetailsAtAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminRepositoryMockRecorder) GetUsers(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminRepository)(nil).GetUsers), page, count)
}

// LoginHandler mocks base method.
func (m *MockAdminRepository) LoginHandler(adminDetails models.AdminLogin) (domain.AdminDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", adminDetails)
	ret0, _ := ret[0].(domain.AdminDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockAdminRepositoryMockRecorder) LoginHandler(adminDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockAdminRepository)(nil).LoginHandler), adminDetails)
}

// OrderDetailsDashboard mocks base method.
func (m *MockAdminRepository) OrderDetailsDashboard() (models.DashboardOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderDetailsDashboard")
	ret0, _ := ret[0].(models.DashboardOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderDetailsDashboard indicates an expected call of OrderDetailsDashboard.
func (mr *MockAdminRepositoryMockRecorder) OrderDetailsDashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderDetailsDashboard", reflect.TypeOf((*MockAdminRepository)(nil).OrderDetailsDashboard))
}

// ProductDetailsDashboard mocks base method.
func (m *MockAdminRepository) ProductDetailsDashboard() (models.DashboardProducts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductDetailsDashboard")
	ret0, _ := ret[0].(models.DashboardProducts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductDetailsDashboard indicates an expected call of ProductDetailsDashboard.
func (mr *MockAdminRepositoryMockRecorder) ProductDetailsDashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDetailsDashboard", reflect.TypeOf((*MockAdminRepository)(nil).ProductDetailsDashboard))
}

// TotalRevenue mocks base method.
func (m *MockAdminRepository) TotalRevenue() (models.DashboardRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalRevenue")
	ret0, _ := ret[0].(models.DashboardRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalRevenue indicates an expected call of TotalRevenue.
func (mr *MockAdminRepositoryMockRecorder) TotalRevenue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalRevenue", reflect.TypeOf((*MockAdminRepository)(nil).TotalRevenue))
}

// UpdateBlockUserByID mocks base method.
func (m *MockAdminRepository) UpdateBlockUserByID(user domain.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockUserByID", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockUserByID indicates an expected call of UpdateBlockUserByID.
func (mr *MockAdminRepositoryMockRecorder) UpdateBlockUserByID(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockUserByID", reflect.TypeOf((*MockAdminRepository)(nil).UpdateBlockUserByID), user)
}

// UserDetailsDashboard mocks base method.
func (m *MockAdminRepository) UserDetailsDashboard() (models.DashboardUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetailsDashboard")
	ret0, _ := ret[0].(models.DashboardUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetailsDashboard indicates an expected call of UserDetailsDashboard.
func (mr *MockAdminRepositoryMockRecorder) UserDetailsDashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetailsDashboard", reflect.TypeOf((*MockAdminRepository)(nil).UserDetailsDashboard))
}
