// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/cart.go

// Package mock is a generated GoMock package.
package mock

import (
	interfaces "eatry/pkg/repository/interfaces"
	models "eatry/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartRepository) AddToCart(userID, productID int, Quantity, productprice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", userID, productID, Quantity, productprice)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartRepositoryMockRecorder) AddToCart(userID, productID, Quantity, productprice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartRepository)(nil).AddToCart), userID, productID, Quantity, productprice)
}

// DisplayCart mocks base method.
func (m *MockCartRepository) DisplayCart(userID int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisplayCart", userID)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisplayCart indicates an expected call of DisplayCart.
func (mr *MockCartRepositoryMockRecorder) DisplayCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisplayCart", reflect.TypeOf((*MockCartRepository)(nil).DisplayCart), userID)
}

// GetAllItemsFromCart mocks base method.
func (m *MockCartRepository) GetAllItemsFromCart(userID int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItemsFromCart", userID)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItemsFromCart indicates an expected call of GetAllItemsFromCart.
func (mr *MockCartRepositoryMockRecorder) GetAllItemsFromCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItemsFromCart", reflect.TypeOf((*MockCartRepository)(nil).GetAllItemsFromCart), userID)
}

// GetQuantityAndProductDetails mocks base method.
func (m *MockCartRepository) GetQuantityAndProductDetails(userID, productID int, cartdetails interfaces.CartDetails) (interfaces.CartDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuantityAndProductDetails", userID, productID, cartdetails)
	ret0, _ := ret[0].(interfaces.CartDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuantityAndProductDetails indicates an expected call of GetQuantityAndProductDetails.
func (mr *MockCartRepositoryMockRecorder) GetQuantityAndProductDetails(userID, productID, cartdetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuantityAndProductDetails", reflect.TypeOf((*MockCartRepository)(nil).GetQuantityAndProductDetails), userID, productID, cartdetails)
}

// GetTotalPrice mocks base method.
func (m *MockCartRepository) GetTotalPrice(userID int) (models.CartTotal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPrice", userID)
	ret0, _ := ret[0].(models.CartTotal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPrice indicates an expected call of GetTotalPrice.
func (mr *MockCartRepositoryMockRecorder) GetTotalPrice(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPrice", reflect.TypeOf((*MockCartRepository)(nil).GetTotalPrice), userID)
}

// ProductExists mocks base method.
func (m *MockCartRepository) ProductExists(userID, productID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProductExists", userID, productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductExists indicates an expected call of ProductExists.
func (mr *MockCartRepositoryMockRecorder) ProductExists(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductExists", reflect.TypeOf((*MockCartRepository)(nil).ProductExists), userID, productID)
}

// QuantityofProductInCart mocks base method.
func (m *MockCartRepository) QuantityofProductInCart(userID, productID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuantityofProductInCart", userID, productID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuantityofProductInCart indicates an expected call of QuantityofProductInCart.
func (mr *MockCartRepositoryMockRecorder) QuantityofProductInCart(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuantityofProductInCart", reflect.TypeOf((*MockCartRepository)(nil).QuantityofProductInCart), userID, productID)
}

// RemoveFromCart mocks base method.
func (m *MockCartRepository) RemoveFromCart(userID int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", userID)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartRepositoryMockRecorder) RemoveFromCart(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartRepository)(nil).RemoveFromCart), userID)
}

// RemoveProductFromCart mocks base method.
func (m *MockCartRepository) RemoveProductFromCart(userID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProductFromCart", userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProductFromCart indicates an expected call of RemoveProductFromCart.
func (mr *MockCartRepositoryMockRecorder) RemoveProductFromCart(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProductFromCart", reflect.TypeOf((*MockCartRepository)(nil).RemoveProductFromCart), userID, productID)
}

// TotalPriceIncrementInCart mocks base method.
func (m *MockCartRepository) TotalPriceIncrementInCart(userID, productID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalPriceIncrementInCart", userID, productID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalPriceIncrementInCart indicates an expected call of TotalPriceIncrementInCart.
func (mr *MockCartRepositoryMockRecorder) TotalPriceIncrementInCart(userID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalPriceIncrementInCart", reflect.TypeOf((*MockCartRepository)(nil).TotalPriceIncrementInCart), userID, productID)
}

// UpdateCart mocks base method.
func (m *MockCartRepository) UpdateCart(userID, productID int, Quantity, TotalPrice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", userID, productID, Quantity, TotalPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockCartRepositoryMockRecorder) UpdateCart(userID, productID, Quantity, TotalPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockCartRepository)(nil).UpdateCart), userID, productID, Quantity, TotalPrice)
}

// UpdateCartDetails mocks base method.
func (m *MockCartRepository) UpdateCartDetails(cartdetails interfaces.CartDetails, userId, productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartDetails", cartdetails, userId, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartDetails indicates an expected call of UpdateCartDetails.
func (mr *MockCartRepositoryMockRecorder) UpdateCartDetails(cartdetails, userId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartDetails", reflect.TypeOf((*MockCartRepository)(nil).UpdateCartDetails), cartdetails, userId, productId)
}
