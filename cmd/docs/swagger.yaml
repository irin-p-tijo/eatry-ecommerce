definitions:
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.UserDetails:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - confirm_password
    - email
    - name
    - password
    - phone
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the API documentation for Eatry - E-commerce application.
  title: Eatry - E-commerce API
  version: "1.0"
paths:
  /admin/block:
    post:
      consumes:
      - application/json
      description: Blocks a user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Block user
      tags:
      - Admin
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Retrieves the admin dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get admin dashboard
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Logs in as an admin
      parameters:
      - description: Admin login details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login as admin
      tags:
      - Admin
  /admin/sales-report-by-date:
    get:
      consumes:
      - application/json
      description: Retrieves the sales report for a specific date range
      parameters:
      - description: Start date
        in: query
        name: start
        required: true
        type: string
      - description: End date
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get sales report by date
      tags:
      - Admin
  /admin/unblock:
    post:
      consumes:
      - application/json
      description: Unblocks a user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Unblock user
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Number of users per page
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get users
      tags:
      - Admin
  /cart/display:
    get:
      consumes:
      - application/json
      description: Display the contents of the cart for a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Display the contents of the cart
      tags:
      - Cart
  /cart/remove:
    post:
      consumes:
      - application/json
      description: Remove a product from the cart for a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      - description: Product ID
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Remove a product from the cart
      tags:
      - Cart
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: User sign up
      tags:
      - users
swagger: "2.0"
